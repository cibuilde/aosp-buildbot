name: 'bootstrap'
description: 'Clone and Cache Projects'
#inputs:
#  branches:
#    required: true
#outputs:
#  greeting:
#    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Restore Cache build/make
      id: build_make
      uses: actions/cache@v3
      with:
        path: "aosp/build/make"
        key: "build_make@$BRANCH"
        restore-keys: "build_make@$BRANCH"
    - name: Clone project build/make
      if: steps.build_make.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform build
        mv build make && mkdir build && mv make build/
        sed -i 's/^PRODUCT_EXTRA_VNDK_VERSIONS/#PRODUCT_EXTRA_VNDK_VERSIONS/g' build/make/target/product/gsi_release.mk
    - name: Restore Cache build/blueprint
      id: build_blueprint
      uses: actions/cache@v3
      with:
        path: "aosp/build/blueprint"
        key: "build_blueprint@$BRANCH"
        restore-keys: "build_blueprint@$BRANCH"
    - name: Clone project build/blueprint
      if: steps.build_blueprint.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform build/blueprint
    - name: Restore Cache build/soong
      id: build_soong
      uses: actions/cache@v3
      with:
        path: "aosp/build/soong"
        key: "build_soong@$BRANCH"
        restore-keys: "build_soong@$BRANCH"
    - name: Clone project build/soong
      if: steps.build_soong.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform build/soong
    - name: Restore Cache bionic
      id: bionic
      uses: actions/cache@v3
      with:
        path: "aosp/bionic"
        key: "bionic@$BRANCH"
        restore-keys: "bionic@$BRANCH"
    - name: Clone project bionic
      if: steps.bionic.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform bionic
    - name: Restore Cache external/libcxx
      id: external_libcxx
      uses: actions/cache@v3
      with:
        path: "aosp/external/libcxx"
        key: "external_libcxx@$BRANCH"
        restore-keys: "external_libcxx@$BRANCH"
    - name: Clone project external/libcxx
      if: steps.external_libcxx.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform external/libcxx
    - name: Restore Cache external/libcxxabi
      id: external_libcxxabi
      uses: actions/cache@v3
      with:
        path: "aosp/external/libcxxabi"
        key: "external_libcxxabi@$BRANCH"
        restore-keys: "external_libcxxabi@$BRANCH"
    - name: Clone project external/libcxxabi
      if: steps.external_libcxxabi.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform external/libcxxabi
    - name: Restore Cache external/compiler-rt
      id: external_compiler-rt
      uses: actions/cache@v3
      with:
        path: "aosp/external/compiler-rt"
        key: "external_compiler-rt@$BRANCH"
        restore-keys: "external_compiler-rt@$BRANCH"
    - name: Clone project external/compiler-rt
      if: steps.external_compiler-rt.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform external/compiler-rt
    - name: Restore Cache external/gwp_asan
      id: external_gwp_asan
      uses: actions/cache@v3
      with:
        path: "aosp/external/gwp_asan"
        key: "external_gwp_asan@$BRANCH"
        restore-keys: "external_gwp_asan@$BRANCH"
    - name: Clone project external/gwp_asan
      if: steps.external_gwp_asan.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform external/gwp_asan
    - name: Restore Cache external/golang-protobuf
      id: external_golang-protobuf
      uses: actions/cache@v3
      with:
        path: "aosp/external/golang-protobuf"
        key: "external_golang-protobuf@$BRANCH"
        restore-keys: "external_golang-protobuf@$BRANCH"
    - name: Clone project external/golang-protobuf
      if: steps.external_golang-protobuf.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform external/golang-protobuf
    - name: Restore Cache external/starlark-go
      id: external_starlark-go
      uses: actions/cache@v3
      with:
        path: "aosp/external/starlark-go"
        key: "external_starlark-go@$BRANCH"
        restore-keys: "external_starlark-go@$BRANCH"
    - name: Clone project external/starlark-go
      if: steps.external_starlark-go.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform external/starlark-go
    - name: Restore Cache system/core
      id: system_core
      uses: actions/cache@v3
      with:
        path: "aosp/system/core"
        key: "system_core@$BRANCH"
        restore-keys: "system_core@$BRANCH"
    - name: Clone project system/core
      if: steps.system_core.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform system/core
    - name: Restore Cache system/libbase
      id: system_libbase
      uses: actions/cache@v3
      with:
        path: "aosp/system/libbase"
        key: "system_libbase@$BRANCH"
        restore-keys: "system_libbase@$BRANCH"
    - name: Clone project system/libbase
      if: steps.system_libbase.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform system/libbase
    - name: Restore Cache system/libhwbinder
      id: system_libhwbinder
      uses: actions/cache@v3
      with:
        path: "aosp/system/libhwbinder"
        key: "system_libhwbinder@$BRANCH"
        restore-keys: "system_libhwbinder@$BRANCH"
    - name: Clone project system/libhwbinder
      if: steps.system_libhwbinder.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform system/libhwbinder
    - name: Restore Cache system/logging
      id: system_logging
      uses: actions/cache@v3
      with:
        path: "aosp/system/logging"
        key: "system_logging@$BRANCH"
        restore-keys: "system_logging@$BRANCH"
    - name: Clone project system/logging
      if: steps.system_logging.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform system/logging
    - name: Restore Cache system/sepolicy
      id: system_sepolicy
      uses: actions/cache@v3
      with:
        path: "aosp/system/sepolicy"
        key: "system_sepolicy@$BRANCH"
        restore-keys: "system_sepolicy@$BRANCH"
    - name: Clone project system/sepolicy
      if: steps.system_sepolicy.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth_platform system/sepolicy
    - name: Restore Cache kernel/configs
      id: kernel_configs
      uses: actions/cache@v3
      with:
        path: "aosp/kernel/configs"
        key: "kernel_configs@$BRANCH"
        restore-keys: "kernel_configs@$BRANCH"
    - name: Clone project kernel/configs
      if: steps.kernel_configs.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_depth kernel/configs

    - name: Download get_clang_version.py and Link go
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        curl "https://android.googlesource.com/platform/build/soong/+/refs/heads/master/scripts/get_clang_version.py?format=TEXT" | base64 -d > $GITHUB_WORKSPACE/get_clang_version.py
        popd
    - name: Restore Cache prebuilts/build-tools
      id: prebuilts_build-tools
      uses: actions/cache@v3
      with:
        path: "aosp/prebuilts/build-tools"
        key: "prebuilts_build-tools@$BRANCH"
        restore-keys: "prebuilts_build-tools@$BRANCH"
    - name: Clone project prebuilts/build-tools
      if: steps.prebuilts_build-tools.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_sparse prebuilts/build-tools linux-x86/bin linux-x86/lib64 path common
    - name: Restore Cache prebuilts/clang-tools
      id: prebuilts_clang-tools
      uses: actions/cache@v3
      with:
        path: "aosp/prebuilts/clang-tools"
        key: "prebuilts_clang-tools@$BRANCH"
        restore-keys: "prebuilts_clang-tools@$BRANCH"
    - name: Clone project prebuilts/clang-tools
      if: steps.prebuilts_clang-tools.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_sparse prebuilts/clang-tools linux-x86/bin linux-x86/lib64/clang
    - name: Restore Cache prebuilts/clang/host/linux-x86
      id: prebuilts_clang_host_linux-x86
      uses: actions/cache@v3
      with:
        path: "aosp/prebuilts/clang/host/linux-x86"
        key: "prebuilts_clang_host_linux-x86@$BRANCH"
        restore-keys: "prebuilts_clang_host_linux-x86@$BRANCH"
    - name: Clone project prebuilts/clang/host/linux-x86
      if: steps.prebuilts_clang_host_linux-x86.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_sparse prebuilts/clang/host/linux-x86 $(python ${GITHUB_WORKSPACE}/get_clang_version.py) soong
    - name: Restore Cache prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.17-4.8
      id: prebuilts_gcc_linux-x86_host_x86_64-linux-glibc2_17-4_8
      uses: actions/cache@v3
      with:
        path: "aosp/prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.17-4.8"
        key: "prebuilts_gcc_linux-x86_host_x86_64-linux-glibc2_17-4_8@$BRANCH"
        restore-keys: "prebuilts_gcc_linux-x86_host_x86_64-linux-glibc2_17-4_8@$BRANCH"
    - name: Clone project prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.17-4.8
      if: steps.prebuilts_gcc_linux-x86_host_x86_64-linux-glibc2_17-4_8.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_sparse prebuilts/gcc/linux-x86/host/x86_64-linux-glibc2.17-4.8 sysroot lib/gcc/x86_64-linux/4.8.3 x86_64-linux/lib64
    - name: Restore Cache prebuilts/ndk
      id: prebuilts_ndk
      uses: actions/cache@v3
      with:
        path: "aosp/prebuilts/ndk"
        key: "prebuilts_ndk@$BRANCH"
        restore-keys: "prebuilts_ndk@$BRANCH"
    - name: Clone project prebuilts/ndk
      if: steps.prebuilts_ndk.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_sparse prebuilts/ndk current
    - name: Restore Cache prebuilts/rust
      id: prebuilts_rust
      uses: actions/cache@v3
      with:
        path: "aosp/prebuilts/rust"
        key: "prebuilts_rust@$BRANCH"
        restore-keys: "prebuilts_rust@$BRANCH"
    - name: Clone project prebuilts/rust
      if: steps.prebuilts_rust.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p aosp && pushd aosp
        source $GITHUB_WORKSPACE/envsetup.sh
        clone_sparse prebuilts/rust bootstrap linux-x86/1.51.0
    - name: Copy and Link
      shell: bash
      run: |
        export ROOTDIR=$(pwd)
        pushd aosp
        cp build/make/core/root.mk Makefile
        ln -sf make/CleanSpec.mk build/ && ln -sf make/core build/
        ln -sf make/target build/ && ln -sf make/tools build/
        ln -sf build/soong/root.bp Android.bp
        mkdir -p prebuilts/go && touch prebuilts/go/.out-dir
        ln -sf $GOROOT_1_19_X64 prebuilts/go/linux-x86
        popd
